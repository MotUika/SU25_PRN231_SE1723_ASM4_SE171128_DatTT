// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using MyDNA.Repositories.DatTT.Models;
using System;
using System.Collections.Generic;

namespace MyDNA.Repositories.DatTT.DBContext;

public partial class SU25_PRN231_SE1723_G1_MyDNAContext : DbContext
{
    public SU25_PRN231_SE1723_G1_MyDNAContext()
    {
    }

    public SU25_PRN231_SE1723_G1_MyDNAContext(DbContextOptions<SU25_PRN231_SE1723_G1_MyDNAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<FeedBackRatingDatTT> FeedBackRatingDatTT { get; set; }

    public virtual DbSet<ServiceDatTT> ServiceDatTT { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccount { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);


    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-FB730RO\\SQLEXPRESS;Initial Catalog=SU25_PRN231_SE1723_G1_MyDNA;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<FeedBackRatingDatTT>(entity =>
        {
            entity.HasKey(e => e.FeedBackRatingDatTtid).HasName("PK__FeedBack__4264360D373FF430");

            entity.ToTable("FeedBackRatingDatTT");

            entity.Property(e => e.FeedBackRatingDatTtid).HasColumnName("FeedBackRatingDatTTID");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FeedbackScore).HasColumnName("feedback_score");
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasColumnName("is_visible");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.ServiceDatTtid).HasColumnName("ServiceDatTTID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.WriterName)
                .HasMaxLength(100)
                .HasColumnName("writer_name");

            entity.HasOne(d => d.ServiceDatTt).WithMany(p => p.FeedBackRatingDatTT)
                .HasForeignKey(d => d.ServiceDatTtid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeedBack_Service");
        });

        modelBuilder.Entity<ServiceDatTT>(entity =>
        {
            entity.HasKey(e => e.ServiceDatTtid).HasName("PK__Services__613487956E80AD3D");

            entity.Property(e => e.ServiceDatTtid).HasColumnName("ServiceDatTTID");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("description");
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("service_name");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}